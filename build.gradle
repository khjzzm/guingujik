plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id 'java'
}

group = 'com.yeoboya'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

bootJar {
//    dependsOn asciidoctor
//    from("${asciidoctor.outputDir}") {
//        into "static/docs"
//    }
}

jar {
    enabled = false // 기본 JAR 작업 비활성화 (bootJar 사용)
}

dependencies {
    // Spring Boot 스타터 및 프레임워크 관련 의존성
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'

    // JWT 관련 의존성
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-gson:0.11.5'

    // 캐싱, 데이터베이스, 로깅 및 기타 유틸리티 의존성
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.7.4'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.2'
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
    implementation 'org.json:json:20210307'
    implementation 'software.amazon.awssdk:secretsmanager:2.24.12'

    //monitor
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.6.RELEASE"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:2.0.6.RELEASE"
    implementation 'com.j256.simplemagic:simplemagic:1.17'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.imgscalr:imgscalr-lib:4.2'

    // HTTP 클라이언트, 제한 정책 및 테스트 관련 의존성
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    runtimeOnly 'com.h2database:h2'
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // 테스트 관련 의존성
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation "org.testcontainers:testcontainers:1.17.6"
    testImplementation "org.testcontainers:junit-jupiter:1.17.6"
    testImplementation "org.testcontainers:mariadb:1.17.6"
}

test {
    useJUnitPlatform()
//    outputs.dir file('build/generated-snippets')
}

//asciidoctor {
//    configurations 'asciidoctorExt'
//    dependsOn test
//    doFirst {
//        new File('build/generated-snippets').mkdirs()
//    }
//}

//task copyDocument(type: Copy) {
//    dependsOn asciidoctor
//    from file("${asciidoctor.outputDir}")
//    into file("src/main/resources/static/docs")
//}

//build {
//    dependsOn copyDocument
//}

clean {
//    delete file("src/main/resources/static/docs")
    delete file('src/main/generated')
}
